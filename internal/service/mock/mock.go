// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	repository "github.com/Konstantsiy/image-converter/internal/repository"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// ParseToken mocks base method
func (m *MockAuthorization) ParseToken(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// LogIn mocks base method
func (m *MockAuthorization) LogIn(ctx context.Context, email, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LogIn indicates an expected call of LogIn
func (mr *MockAuthorizationMockRecorder) LogIn(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockAuthorization)(nil).LogIn), ctx, email, password)
}

// SignUp mocks base method
func (m *MockAuthorization) SignUp(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp
func (mr *MockAuthorizationMockRecorder) SignUp(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorization)(nil).SignUp), ctx, email, password)
}

// MockImages is a mock of Images interface
type MockImages struct {
	ctrl     *gomock.Controller
	recorder *MockImagesMockRecorder
}

// MockImagesMockRecorder is the mock recorder for MockImages
type MockImagesMockRecorder struct {
	mock *MockImages
}

// NewMockImages creates a new mock instance
func NewMockImages(ctrl *gomock.Controller) *MockImages {
	mock := &MockImages{ctrl: ctrl}
	mock.recorder = &MockImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImages) EXPECT() *MockImagesMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockImages) Convert(ctx context.Context, sourceFile multipart.File, filename, sourceFormat, targetFormat string, ratio int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", ctx, sourceFile, filename, sourceFormat, targetFormat, ratio)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Convert indicates an expected call of Convert
func (mr *MockImagesMockRecorder) Convert(ctx, sourceFile, filename, sourceFormat, targetFormat, ratio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockImages)(nil).Convert), ctx, sourceFile, filename, sourceFormat, targetFormat, ratio)
}

// Download mocks base method
func (m *MockImages) Download(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockImagesMockRecorder) Download(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockImages)(nil).Download), ctx, id)
}

// MockRequests is a mock of Requests interface
type MockRequests struct {
	ctrl     *gomock.Controller
	recorder *MockRequestsMockRecorder
}

// MockRequestsMockRecorder is the mock recorder for MockRequests
type MockRequestsMockRecorder struct {
	mock *MockRequests
}

// NewMockRequests creates a new mock instance
func NewMockRequests(ctrl *gomock.Controller) *MockRequests {
	mock := &MockRequests{ctrl: ctrl}
	mock.recorder = &MockRequestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequests) EXPECT() *MockRequestsMockRecorder {
	return m.recorder
}

// GetUsersRequests mocks base method
func (m *MockRequests) GetUsersRequests(ctx context.Context) ([]repository.ConversionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersRequests", ctx)
	ret0, _ := ret[0].([]repository.ConversionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersRequests indicates an expected call of GetUsersRequests
func (mr *MockRequestsMockRecorder) GetUsersRequests(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersRequests", reflect.TypeOf((*MockRequests)(nil).GetUsersRequests), ctx)
}

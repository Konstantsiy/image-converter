// Code generated by MockGen. DO NOT EDIT.
// Source: internal/queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	"reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendToQueue mocks base method.
func (m *MockProducer) SendToQueue(fileID, filename, sourceFormat, targetFormat, requestID string, ratio int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToQueue", fileID, filename, sourceFormat, targetFormat, requestID, ratio)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToQueue indicates an expected call of SendToQueue.
func (mr *MockProducerMockRecorder) SendToQueue(fileID, filename, sourceFormat, targetFormat, requestID, ratio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToQueue", reflect.TypeOf((*MockProducer)(nil).SendToQueue), fileID, filename, sourceFormat, targetFormat, requestID, ratio)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockConsumer) Listen() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockConsumerMockRecorder) Listen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConsumer)(nil).Listen))
}

openapi: 3.0.0
info:
  title: Image Converter API
  description: Service that expose a RESTful API to convert JPEG to PNG and vice versa and compress the image
    with the compression ratio specified by the user. The user has the ability to view the history and status of
    their requests (for example, queued, processed, completed) and upload the original image and the processed one.
  version: 3.2.1
servers:
  - url: http://localhost:8080/
    description: API Development Server
  - url: http://converter-balanser-1194542128.eu-central-1.elb.amazonaws.com
    description: AWS Load Balanser DNS
paths:
  /user/login:
    post:
      summary: User authorization
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/AuthRequest'
      responses:
        200:
          description: The user has successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/signup:
    post:
      summary: User registration
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/AuthRequest'
      responses:
        201:
          description: The user has successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          $ref: '#/components/responses/ResourceConflict'
        500:
          $ref: '#/components/responses/InternalServerError'
  /requests:
    get:
      summary: Get user request history
      tags:
        - requests
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: The user gets the request history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestsHistoryResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /conversion:
    post:
      summary: Create an image conversion request
      tags:
        - images
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ConversionRequest'
      responses:
        202:
          description: The conversion request was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /images/{id}:
    get:
      summary: Download needed image by id
      tags:
        - images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: needed image id
          required: true
          schema:
            type: string
            format: uuid
          example:
            id: '7186afcc-cae7-11eb-80ff-0bc45a674b3c'
      responses:
        200:
          description: The image is ready to download
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: link for download each available file in AWS S3 bucket
              example:
                url: https://name-bucket.s3.eu-central-1.amazonaws.com/6a3a76a0-3f49-11ec-8c53-03492df7f446
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: generated access token
        refresh_token:
          type: string
          description: generated refresh token
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzczNTgxNzEsImlhdCI6MTYzNzMxNDk3MSwic3ViIjoiNDNlYjA3NGUtM2YxYy0xMWVjLTg3ZmMtMDIyOTJhYTdmNDQ2In0.x3UPdtg0RvpEA9-0nWV3VOWIFfpJuD4DcQ-kTgbdq-k
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Mzc0ODc3NzEsImlhdCI6MTYzNzMxNDk3MX0.pzQJ3gj8jdRtpeYhpgkaCRRvoMwMlJz-1iFwxm2FZ2M
    SignUpResponse:
      type: object
      properties:
        user_id:
          type: string
          description: id of the created request
      example:
        user_id: 58db242c-4935-11ec-9a01-02292aa7f446
    RequestsHistoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        source_id:
          type: string
          format: uuid
          description: source image id
        target_id:
          type: string
          format: uuid
          description: processed image id
        source_format:
          type: string
          enum: [jpeg, png]
          description: source image format
        target_format:
          type: string
          enum: [jpeg, png]
          description: format to convert the image to
        ratio:
          type: integer
          description: image compression ratio
        created:
          type: string
          format: timestamp
          description: request creating time
        updated:
          type: string
          format: timestamp
          description: request updating time
        status:
          type: string
          enum: [queued, processed, failed, done]
          description: request processing status
      example:
        id: 7186afcc-cae7-11eb-80ff-0bc45a674b3c
        source_id: 43eb074e-3f1c-11ec-87fc-02292aa7f446
        target_id: 6904b200-3f49-11ec-816b-02292aa7f446
        source_format: png
        target_format: jpg
        ratio: 95
        created: "2021-11-06T21:35:07.181954Z"
        updated: "2021-11-06T21:35:09.78527Z"
        status: done
    ConversionResponse:
      type: object
      properties:
        user_id:
          type: string
          description: id of the created request
      example:
        request_id: 58db242c-4935-11ec-9a01-02292aa7f446
    DownloadResponse:
      type: object
      properties:
        user_id:
          type: string
          description: id of the created request
      example:
        user_id: 58db242c-4935-11ec-9a01-02292aa7f446

    Error:
      type: object
      properties:
        statusCode:
          type: string
          format: integer
        message:
          type: string
  # Security scheme definitions
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter JWT Bearer token only
      bearerFormat: JWT
  #Reusable request bodies
  requestBodies:
    AuthRequest:
      description: A JSON object represened as user to add to the system
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
          example:
            email: user1@gmail.com
            password: Password123
    ConversionRequest:
      description: A JSON object consisting of image file, format to convert, and compression ratio
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
                description: source image file
              target_format:
                type: string
                enum: [jpg, jpeg, png]
                description: format for conversion
              ratio:
                type: integer
                minimum: 1
                maximum: 99
                description: compression ratio
          example:
            file: sequence of bytes
            target_format: png
            ratio: 4
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    BadRequest:
      description: The request could not be understood by the server due to malformed syntax
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: "400"
            message: The request could not be understood by the server due to malformed syntax
    Unauthorized:
      description: The request requires user authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: "401"
            message: The request requires user authentication
    NotFound:
      description: The server has not found anything matching the request URI
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: "404"
            message: The server has not found anything matching the request URI
    ResourceConflict:
      description: A similar user is already registered in the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: "409"
            message: The request could not be completed due to a conflict with the current state of the resource
    InternalServerError:
      description: The server encountered an unexpected condition which prevented it from fulfilling the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: "500"
            message: The server encountered an unexpected condition which prevented it from fulfilling the request
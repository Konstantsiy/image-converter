openapi: 3.1.0
info:
  title: Image Converter API
  description: Service that expose a RESTful API to convert JPEG to PNG and vice versa and compress the image
    with the compression ratio specified by the user. The user has the ability to view the history and status of
    their requests (for example, queued, processed, completed) and upload the original image and the processed one.
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: API Development Server
paths:
  /requests:
    get:
      summary: Get user request history
      security:
        - bearerAuth: []
      responses:
        200:
          description: The user gets the request history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestsHistoryResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/login:
    post:
      summary: User authorization
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        200:
          description: The user has successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  JWT-token:
                    type: string
                    format: JWT
              example:
                JWT-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
                SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/signup:
    post:
      summary: User registration
        requestBody:
          $ref: '#/components/requestBodies/UserRequest'
      responses:
        201:
          description: The user has successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
              example:
                id: 7186afcc-cae7-11eb-80ff-0bc45a674b3c
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/UserAlreadyExists'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/logout:
    get:
      summagy: Log out of the user
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /conversion:
    post:
      summary: Create a request to convert an image
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ConversionRequest'
      responses:
        201:
          description: The request successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
              example:
                id: 7186afcc-cae7-11eb-80ff-0bc45a674b3c
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /images/{id}:
    get:
      summary: Download needed image by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Needed image id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
          example:
            id: 7186afcc-cae7-11eb-80ff-0bc45a674b3c
      responses:
        200:
          description: The image is ready to download
          content:
            application/json:
              schema:
                type: object
                properties:
                  #todo
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  # Reusable schemas (data models)
  schemas:
    RequestsHistoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Image name
        source_format:
          type: string
          enum: [jpeg, png]
          description: Source image format
        target_format:
          type: string
          enum: [jpeg, png]
          description: Format to convert the image to
          created:
            type: string
            format: timestamp
          updated:
            type: string
            format: timestamp
          status:
            type: string
            enum: [queued, processed, failed, done]
      example:
        id: 7186afcc-cae7-11eb-80ff-0bc45a674b3c
        name: Screenshot from 2021-06-12 10-44-06.png
        source_format: png
        target_format: jpeg
        created: 2020-06-11 T 15:17:03 Z
        updated: 2020-06-11 T 15:21:17 Z
        status: done
    Error:
      type: object
      properties:
        statusCode:
          type: string
          format: integer
        message:
          type: string
  # Security scheme definitions
  securirySchemes:
    barierAuth:
      type: http
      scheme: bearer
      description: Enter JWT Bearer token only
      bearerFormat: JWT
  # Reusable request bodies
  requestBodies:
    UserRequest:
      description: A JSON object represened as user to add to the system
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
          example:
            email: user@gmail.com
            password: password123
    ConversionRequest:
      description: A JSON object consisting of image file, format to convert, and compression ratio
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
              source_format:
                type: string
                enum: [jpeg, png]
              target_format:
                type: string
                enum: [jpeg, png]
              ratio:
                type: string
                format: integer
                minimum: 1
                maximum: 100
                description: Image compression ratio
          example:
            file: sequence of bytes
            source_format: png
            target_format: jpeg
            ratio: 50
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    BadRequest:
      description: The request could not be understood by the server due to malformed syntax
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: The request requires user authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The server has not found anything matching the request URI
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: The server encountered an unexpected condition which prevented it from fulfilling the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'